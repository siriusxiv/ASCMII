# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)


#prof login
GET		/prof/login					controllers.Application.profLogin()

POST	/prof/login					controllers.Application.profAuthenticate()

POST	/prof/logout				controllers.Application.logOut()

#prof tuto
GET		/tuto						controllers.Tuto.tutorial()

#prof edition séances
GET 	/prof/seances				controllers.Application.profSeancesListe(log: String ?="")

POST	/prof/seances				controllers.Application.addSeance()

POST	/prof/seances/suppr/:id		controllers.Application.removeSeance(id: Long)

POST	/prof/seances/dupl/:id		controllers.Application.dupliquerSeance(id: Long)

POST	/prof/seances/edit/:id		controllers.Application.displayEditSeance(id: Long)

POST	/prof/seances/edit/put/:id	controllers.Application.editSeance(id: Long)

POST	/prof/seances/export:seance_id	controllers.Export.downloadSeance(seance_id: Long)

POST	/prof/seances/import		controllers.Export.uploadSeance()

POST	/prof/gerer/:id				controllers.Application.gererSeance(id: Long)
GET		/prof/gerer/:id				controllers.Application.gererSeance(id: Long)

POST	/prof/vote/:id				controllers.Application.voteSeance(id: Long)
GET		/prof/vote/:id				controllers.Application.voteSeance(id: Long)


#prof édition des questions
POST	/prof/gerer/add/:id			controllers.Application.addSerie(id: Long)

POST	/prof/gerer/del/:id			controllers.Application.delSerie(id: Long)

POST	/prof/gerer/addquestion/:id	controllers.Application.addQuestion(id: Long)

POST	/prof/gerer/addq2/:id		controllers.Application.addQuestion2(id: Long)

POST	/prof/gerer/addq3/:serie_id/:typeQ_id	controllers.Application.addQuestion3(serie_id: Long, typeQ_id: Long)

POST	/prof/gerer/delquestion/:id	controllers.Application.delQuestion(id: Long)

POST	/prof/gerer/up/:id			controllers.Application.monterSerie(id: Long)

POST	/prof/gerer/down/:id		controllers.Application.descendreSerie(id: Long)

POST	/prof/gerer/upquestion/:id	controllers.Application.monterQuestion(id: Long)

POST	/prof/gerer/downquestion/:id	controllers.Application.descendreQuestion(id: Long)

POST	/prof/gerer/editquestion/:id	controllers.Application.editQuestion(id: Long)

POST	/prof/gerer/editquestion2/:id	controllers.Application.editQuestion2(id: Long)

POST	/prof/export/:serie_id		controllers.Export.downloadSerie(serie_id: Long)

POST	/prof/upload/:seance_id		controllers.Export.uploadSerie(seance_id: Long)

POST	/prof/uploadimage/:reponse_id	controllers.UploadImages.upload(reponse_id: Long)

POST	/prof/upload/del/:reponse_id	controllers.UploadImages.deleteImage(reponse_id: Long)

#prof voteEtRésultats
POST	/prof/vote/send/:id			controllers.LancerSerie.creerLiens(id: Long)

POST	/prof/lancer/:id			controllers.LancerSerie.lancerSerie(id: Long)

POST	/prof/lancer2/:id			controllers.LancerSerie.lancerSerie2(id: Long)

POST	/prof/lancertout/:seance_id	controllers.LancerSerie.lancerToutesLesSeries2(seance_id: Long)

GET		/prof/voir/:id				controllers.Application.voirResultats(id: Long)

POST	/prof/fin/:serie_id			controllers.Application.finirSerie(serie_id: Long)

POST	/prof/reset/:serie_id		controllers.Application.resetSerie(serie_id: Long)

GET		/prof/exhaustive/:question_id	controllers.Application.reponsesExhaustives(question_id: Long)

POST	/prof/downloads/:question_id	controllers.Export.downloadExhaustive(question_id: Long)

POST	/prof/vote/csv/:seance_id	controllers.CSV.CSVdownload(seance_id: Long)

#eleve
GET		/eleve/:chemin				controllers.Application.eleveRepondre(chemin: String)

POST	/eleve/reponse/:chemin		controllers.Application.donnerReponse(chemin: String)

GET		/eleve/reponse/:chemin		controllers.Application.eleveRepondre(chemin: String)

#Routes AJAX
#Cette route permet de savoir si la série est finie ou pas (quand le prof met fin à la série)
GET		/eleve/infoheure/:serie_id	controllers.Ajax.infoHeure(serie_id: Long)
#Pour connaître le proportion de personnes qui ont répondu.
GET		/prof/propRepondant/:serie_id	controllers.Ajax.infoNReponses(serie_id: Long)
#Pour savoir si une série a commencée ou pas
GET		/eleve/hasSerieBegun/:chemin	controllers.Ajax.hasSerieBegun(chemin: String)

#Attrappe-tout. Redirige vers un page que l'utilisateur veut sûrement regarder ou vers la page 404
GET		/*nameUrl							controllers.P404.p404(nameUrl: String)
